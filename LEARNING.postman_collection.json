{
	"info": {
		"_postman_id": "c0bfdc20-c1af-40a4-b30a-09a57607f823",
		"name": "LEARNING",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23536458",
		"_collection_link": "https://www.postman.com/winter-equinox-907274/workspace/postman-api-fundamentals-student-expert/collection/23536458-c0bfdc20-c1af-40a4-b30a-09a57607f823?action=share&source=collection_link&creator=23536458"
	},
	"item": [
		{
			"name": "BASIC TEST",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\",function(){\r",
							"    pm.response.to.have.jsonBody()\r",
							"});\r",
							"\r",
							"// 2. We have all the declarated fields in the response\r",
							"pm.test(\"Check that we have all declarated fields\",function(){\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.expect(jsonData).to.have.property(\"people\");\r",
							"pm.expect(jsonData).to.have.property(\"planets\");\r",
							"pm.expect(jsonData).to.have.property(\"films\");\r",
							"pm.expect(jsonData).to.have.property(\"species\");\r",
							"pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"// 3. Field value is not NULL\r",
							"pm.test(\"Check if value is not NULL\", function(){\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.people).not.equal(null);\r",
							"pm.expect(jsonData.planets).not.equal(null);\r",
							"pm.expect(jsonData.films).not.equal(null);\r",
							"pm.expect(jsonData.species).not.equal(null);\r",
							"pm.expect(jsonData.vehicles).not.equal(null);\r",
							"pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"\r",
							"// 4. Check if value isn't empty \r",
							"pm.test(\"Check if value is not empty\", function(){\r",
							"var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.people).not.equal(\"\");\r",
							"pm.expect(jsonData.planets).not.equal(\"\");\r",
							"pm.expect(jsonData.films).not.equal(\"\");\r",
							"pm.expect(jsonData.species).not.equal(\"\");\r",
							"pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"pm.expect(jsonData.starships).not.equal(\"\");\r",
							"});\r",
							"\r",
							"// 5. Check if field corresponds to a specific value\r",
							"pm.test(\"Check if field corresponds to a specific value\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"pm.expect(jsonData.people).to.equal(\"https://swapi.dev/api/people/\");\r",
							"pm.expect(jsonData.planets).to.equal(\"https://swapi.dev/api/planets/\");\r",
							"pm.expect(jsonData.films).to.equal(\"https://swapi.dev/api/films/\");\r",
							"pm.expect(jsonData.species).to.equal(\"https://swapi.dev/api/species/\");\r",
							"pm.expect(jsonData.vehicles).to.equal(\"https://swapi.dev/api/vehicles/\");\r",
							"pm.expect(jsonData.starships).to.equal(\"https://swapi.dev/api/starships/\");\r",
							"});\r",
							"\r",
							"// 6. Status code is 200 \r",
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 7. Status message is OK \r",
							"pm.test(\"Status message is OK\", function(){\r",
							"    pm.response.to.have.status(\"OK\")\r",
							"});\r",
							"\r",
							"// 8. Response time is less than 1000ms\r",
							"pm.test(\"Response time is less than 1000ms\", function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
							"});\r",
							"\r",
							"// 9.There is a specific header in the response\r",
							"pm.test(\"There is a specific header in the response\", function(){\r",
							"    pm.response.to.have.header(\"Content-Type\")\r",
							"});\r",
							"\r",
							"// 10. The response has a specific header with a specific value\r",
							"pm.test(\"The response has a specific header with a specific value\", function(){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"// 11.Cookie exist\r",
							"pm.test(\"Cookie exist\", function(){\r",
							"    pm.cookies.has(\"\")\r",
							"});\r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function(){\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"__cfduid\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e){\r",
							"        console.log(\"Some problem with cookie ->\" + e)\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON schema STRUCTURE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\":\"string\"},\r",
							"        \"planets\": {\"type\":\"string\"},\r",
							"        \"films\": {\"type\":\"string\"},\r",
							"        \"species\": {\"type\":\"string\"},\r",
							"        \"vehicles\": {\"type\":\"string\"},\r",
							"        \"starships\": {\"type\":\"string\"},\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test('Body is correct',function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "JSON schema test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data  = pm.response.json();\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"properties\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\":\"array\",\r",
							"            \"items\": {\"type\":\"string\"}\r",
							"            },\r",
							"            \"species\": {\r",
							"                \"type\":\"array\",\r",
							"                \"items\": {\"type\":\"string\"}\r",
							"            },\r",
							"\r",
							"            \"vehicles\": {\r",
							"                \"type\":\"array\",\r",
							"                \"items\": {\"type\":\"string\"}\r",
							"            },\r",
							"             \"starships\": {\r",
							"                \"type\":\"array\",\r",
							"                \"items\": {\"type\":\"string\"}\r",
							"            }\r",
							"    }\r",
							"    \r",
							"};\r",
							"pm.test(\"Body is correct\", function () {\r",
							"        pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "BASIC AUTH",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth in Headers",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "REQUEST TO MOCKSERVER",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"8293c869-f061-42a7-b188-95be7a7097cf",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "REQUEST TO MOCKSERVER",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"8293c869-f061-42a7-b188-95be7a7097cf",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n    \"status\": {\r\n        \"name\": \"TEST\",\r\n        \"message\": \"Success\"\r\n    }\r\n}"
				}
			]
		},
		{
			"name": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Ruslan\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"8293c869-f061-42a7-b188-95be7a7097cf",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\":\"Ruslan\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"8293c869-f061-42a7-b188-95be7a7097cf",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": "{\r\n\"status\": {\r\n\"name\": \"Ruslan\",\r\n\"status\":\"created\",\r\n\"message\": \"Success\"\r\n}\r\n}"
				}
			]
		},
		{
			"name": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Ruslan\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://8293c869-f061-42a7-b188-95be7a7097cf.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"8293c869-f061-42a7-b188-95be7a7097cf",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": []
		}
	]
}